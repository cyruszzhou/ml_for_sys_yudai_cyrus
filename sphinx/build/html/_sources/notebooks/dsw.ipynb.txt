{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "841a807f",
   "metadata": {},
   "source": [
    "# Detecting Webcam Spying (Yudai and Cyrus' project)\n",
    "\n",
    "In this project, we implement machine learning models that detect webcam spying by means of packet capturing. There were three steps in this project.\n",
    "\n",
    "1. Capturing packet traces under different conditions: with/without the spying; and various webcam usages - **(1) zoom, (2) facebook messenger, (3) spying, (4) spying while zoom, (5) spying while messenger, and (6) nothing.**\n",
    "\n",
    "\n",
    "2. Feature selection\n",
    "\n",
    "\n",
    "3. Training and evaluating a supervised model to classifiy the different conditions (i.e., detect spying).\n",
    "\n",
    "\n",
    "4. Evaluating a unsupervised model to classifiy the different conditions (i.e., detect spying)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6855446",
   "metadata": {},
   "source": [
    "## Part 1: Packet Capture"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b11449ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "import logging\n",
    "logging.getLogger(\"scapy.runtime\").setLevel(logging.ERROR)\n",
    "\n",
    "from netml.pparser.parser import PCAP\n",
    "from netml.utils.tool import dump_data, load_data\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "953293a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "example_pcap_n = PCAP('data/n_4.pcap')\n",
    "example_pcap_s = PCAP('data/s_6.pcap')\n",
    "example_pcap_w = PCAP('data/w_19.pcap')\n",
    "example_pcap_ws = PCAP('data/w+s_11.pcap')\n",
    "example_pcap_z = PCAP('data/z_3.pcap')\n",
    "example_pcap_zs = PCAP('data/z+s_14.pcap')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c5fbc223",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We unify the source ip, destination ip, source port, destination port\n",
    "# and protocol for every packets, so that we can treat them as one \"flow\"\n",
    "def ip_protocol_agnostic(flows):\n",
    "    agnostic_flows = []\n",
    "    dummy_tuple = ('1.1.1.1', '2.2.2.2', 5000, 5000, 6)\n",
    "    for flow in flows:\n",
    "        agnostic_flows.append((dummy_tuple,flow[1]))\n",
    "    return agnostic_flows"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d247d1f",
   "metadata": {},
   "source": [
    "## Part 2: Feature Selection"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3a5b24e",
   "metadata": {},
   "source": [
    "#### We first speculate through some example pcaps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6a9e33c6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'_pcap2flows()' starts at 2022-11-26 12:25:07\n",
      "pcap_file: data/n_4.pcap\n",
      "ith_packets: 0\n",
      "len(flows): 63\n",
      "total number of flows: 63. Num of flows < 2 pkts: 15, and >=2 pkts: 48 without timeout splitting.\n",
      "kept flows: 48. Each of them has at least 2 pkts after timeout splitting.\n",
      "flow_durations.shape: (48, 1)\n",
      "       col_0\n",
      "count 48.000\n",
      "mean   2.940\n",
      "std    3.939\n",
      "min    0.000\n",
      "25%    0.027\n",
      "50%    0.041\n",
      "75%    6.010\n",
      "max   10.033\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 48 entries, 0 to 47\n",
      "Data columns (total 1 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   col_0   48 non-null     float64\n",
      "dtypes: float64(1)\n",
      "memory usage: 512.0 bytes\n",
      "None\n",
      "0th_flow: len(pkts): 4\n",
      "After splitting flows, the number of subflows: 47 and each of them has at least 2 packets.\n",
      "'_pcap2flows()' ends at 2022-11-26 12:25:07 and takes 0.0031 mins.\n",
      "'_pcap2flows()' starts at 2022-11-26 12:25:07\n",
      "pcap_file: data/s_6.pcap\n",
      "ith_packets: 0\n",
      "ith_packets: 10000\n",
      "ith_packets: 20000\n",
      "ith_packets: 30000\n",
      "len(flows): 70\n",
      "total number of flows: 70. Num of flows < 2 pkts: 25, and >=2 pkts: 45 without timeout splitting.\n",
      "kept flows: 45. Each of them has at least 2 pkts after timeout splitting.\n",
      "flow_durations.shape: (45, 1)\n",
      "       col_0\n",
      "count 45.000\n",
      "mean   2.826\n",
      "std    4.026\n",
      "min    0.000\n",
      "25%    0.026\n",
      "50%    0.044\n",
      "75%    5.981\n",
      "max   11.014\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 45 entries, 0 to 44\n",
      "Data columns (total 1 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   col_0   45 non-null     float64\n",
      "dtypes: float64(1)\n",
      "memory usage: 488.0 bytes\n",
      "None\n",
      "0th_flow: len(pkts): 37605\n",
      "After splitting flows, the number of subflows: 45 and each of them has at least 2 packets.\n",
      "'_pcap2flows()' ends at 2022-11-26 12:25:22 and takes 0.25 mins.\n",
      "'_pcap2flows()' starts at 2022-11-26 12:25:22\n",
      "pcap_file: data/w_19.pcap\n",
      "ith_packets: 0\n",
      "len(flows): 62\n",
      "total number of flows: 62. Num of flows < 2 pkts: 16, and >=2 pkts: 46 without timeout splitting.\n",
      "kept flows: 46. Each of them has at least 2 pkts after timeout splitting.\n",
      "flow_durations.shape: (46, 1)\n",
      "       col_0\n",
      "count 46.000\n",
      "mean   2.264\n",
      "std    3.872\n",
      "min    0.000\n",
      "25%    0.022\n",
      "50%    0.100\n",
      "75%    2.048\n",
      "max   11.263\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 46 entries, 0 to 45\n",
      "Data columns (total 1 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   col_0   46 non-null     float64\n",
      "dtypes: float64(1)\n",
      "memory usage: 496.0 bytes\n",
      "None\n",
      "0th_flow: len(pkts): 1849\n",
      "After splitting flows, the number of subflows: 46 and each of them has at least 2 packets.\n",
      "'_pcap2flows()' ends at 2022-11-26 12:25:24 and takes 0.0322 mins.\n",
      "'_pcap2flows()' starts at 2022-11-26 12:25:24\n",
      "pcap_file: data/w+s_11.pcap\n",
      "ith_packets: 0\n",
      "ith_packets: 10000\n",
      "len(flows): 70\n",
      "total number of flows: 70. Num of flows < 2 pkts: 30, and >=2 pkts: 40 without timeout splitting.\n",
      "kept flows: 40. Each of them has at least 2 pkts after timeout splitting.\n",
      "flow_durations.shape: (40, 1)\n",
      "       col_0\n",
      "count 40.000\n",
      "mean   4.596\n",
      "std    4.525\n",
      "min    0.000\n",
      "25%    0.021\n",
      "50%    4.496\n",
      "75%    9.065\n",
      "max   10.498\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 40 entries, 0 to 39\n",
      "Data columns (total 1 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   col_0   40 non-null     float64\n",
      "dtypes: float64(1)\n",
      "memory usage: 448.0 bytes\n",
      "None\n",
      "0th_flow: len(pkts): 12171\n",
      "After splitting flows, the number of subflows: 40 and each of them has at least 2 packets.\n",
      "'_pcap2flows()' ends at 2022-11-26 12:25:30 and takes 0.0994 mins.\n",
      "'_pcap2flows()' starts at 2022-11-26 12:25:30\n",
      "pcap_file: data/z_3.pcap\n",
      "ith_packets: 0\n",
      "len(flows): 83\n",
      "total number of flows: 83. Num of flows < 2 pkts: 17, and >=2 pkts: 66 without timeout splitting.\n",
      "kept flows: 66. Each of them has at least 2 pkts after timeout splitting.\n",
      "flow_durations.shape: (66, 1)\n",
      "       col_0\n",
      "count 66.000\n",
      "mean   4.559\n",
      "std    3.339\n",
      "min    0.000\n",
      "25%    1.280\n",
      "50%    5.120\n",
      "75%    6.071\n",
      "max   10.512\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 66 entries, 0 to 65\n",
      "Data columns (total 1 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   col_0   66 non-null     float64\n",
      "dtypes: float64(1)\n",
      "memory usage: 656.0 bytes\n",
      "None\n",
      "0th_flow: len(pkts): 1255\n",
      "After splitting flows, the number of subflows: 65 and each of them has at least 2 packets.\n",
      "'_pcap2flows()' ends at 2022-11-26 12:25:31 and takes 0.0178 mins.\n",
      "'_pcap2flows()' starts at 2022-11-26 12:25:31\n",
      "pcap_file: data/z+s_14.pcap\n",
      "ith_packets: 0\n",
      "ith_packets: 10000\n",
      "ith_packets: 20000\n",
      "ith_packets: 30000\n",
      "len(flows): 88\n",
      "total number of flows: 88. Num of flows < 2 pkts: 22, and >=2 pkts: 66 without timeout splitting.\n",
      "kept flows: 66. Each of them has at least 2 pkts after timeout splitting.\n",
      "flow_durations.shape: (66, 1)\n",
      "       col_0\n",
      "count 66.000\n",
      "mean   4.953\n",
      "std    3.758\n",
      "min    0.001\n",
      "25%    0.088\n",
      "50%    5.120\n",
      "75%    7.428\n",
      "max   10.558\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 66 entries, 0 to 65\n",
      "Data columns (total 1 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   col_0   66 non-null     float64\n",
      "dtypes: float64(1)\n",
      "memory usage: 656.0 bytes\n",
      "None\n",
      "0th_flow: len(pkts): 1303\n",
      "After splitting flows, the number of subflows: 66 and each of them has at least 2 packets.\n",
      "'_pcap2flows()' ends at 2022-11-26 12:25:45 and takes 0.2363 mins.\n"
     ]
    }
   ],
   "source": [
    "example_pcap_n.pcap2flows()\n",
    "example_pcap_s.pcap2flows()\n",
    "example_pcap_w.pcap2flows()\n",
    "example_pcap_ws.pcap2flows()\n",
    "example_pcap_z.pcap2flows()\n",
    "example_pcap_zs.pcap2flows()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7c07f4e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'_flow2features()' starts at 2022-11-26 12:25:45\n",
      "True\n",
      "'_flow2features()' ends at 2022-11-26 12:25:45 and takes 0.0001 mins.\n",
      "'_flow2features()' starts at 2022-11-26 12:25:45\n",
      "True\n",
      "'_flow2features()' ends at 2022-11-26 12:25:46 and takes 0.0119 mins.\n",
      "'_flow2features()' starts at 2022-11-26 12:25:46\n",
      "True\n",
      "'_flow2features()' ends at 2022-11-26 12:25:46 and takes 0.0009 mins.\n",
      "'_flow2features()' starts at 2022-11-26 12:25:46\n",
      "True\n",
      "'_flow2features()' ends at 2022-11-26 12:25:46 and takes 0.0038 mins.\n",
      "'_flow2features()' starts at 2022-11-26 12:25:46\n",
      "True\n",
      "'_flow2features()' ends at 2022-11-26 12:25:46 and takes 0.0006 mins.\n",
      "'_flow2features()' starts at 2022-11-26 12:25:46\n",
      "True\n",
      "'_flow2features()' ends at 2022-11-26 12:25:47 and takes 0.0088 mins.\n"
     ]
    }
   ],
   "source": [
    "example_pcap_n.flow2features('SAMP_SIZE')\n",
    "example_pcap_s.flow2features('SAMP_SIZE')\n",
    "example_pcap_w.flow2features('SAMP_SIZE')\n",
    "example_pcap_ws.flow2features('SAMP_SIZE')\n",
    "example_pcap_z.flow2features('SAMP_SIZE')\n",
    "example_pcap_zs.flow2features('SAMP_SIZE')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cb4f600d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_example_n = pd.DataFrame(example_pcap_n.features)\n",
    "df_example_s = pd.DataFrame(example_pcap_s.features)\n",
    "df_example_w = pd.DataFrame(example_pcap_w.features)\n",
    "df_example_ws = pd.DataFrame(example_pcap_ws.features)\n",
    "df_example_z = pd.DataFrame(example_pcap_z.features)\n",
    "df_example_zs = pd.DataFrame(example_pcap_zs.features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0381f4c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "agnostic_sampsize_n = df_example_n.sum(axis=0)\n",
    "agnostic_sampsize_s = df_example_s.sum(axis=0)\n",
    "agnostic_sampsize_w = df_example_w.sum(axis=0)\n",
    "agnostic_sampsize_ws = df_example_ws.sum(axis=0)\n",
    "agnostic_sampsize_z = df_example_z.sum(axis=0)\n",
    "agnostic_sampsize_zs = df_example_zs.sum(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3a0da472",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'_flow2features()' starts at 2022-11-26 12:25:47\n",
      "True\n",
      "'_flow2features()' ends at 2022-11-26 12:25:47 and takes 0.0001 mins.\n",
      "'_flow2features()' starts at 2022-11-26 12:25:47\n",
      "True\n",
      "'_flow2features()' ends at 2022-11-26 12:25:47 and takes 0.0095 mins.\n",
      "'_flow2features()' starts at 2022-11-26 12:25:47\n",
      "True\n",
      "'_flow2features()' ends at 2022-11-26 12:25:48 and takes 0.0008 mins.\n",
      "'_flow2features()' starts at 2022-11-26 12:25:48\n",
      "True\n",
      "'_flow2features()' ends at 2022-11-26 12:25:48 and takes 0.0038 mins.\n",
      "'_flow2features()' starts at 2022-11-26 12:25:48\n",
      "True\n",
      "'_flow2features()' ends at 2022-11-26 12:25:48 and takes 0.0006 mins.\n",
      "'_flow2features()' starts at 2022-11-26 12:25:48\n",
      "True\n",
      "'_flow2features()' ends at 2022-11-26 12:25:48 and takes 0.0088 mins.\n"
     ]
    }
   ],
   "source": [
    "example_pcap_n.flow2features('SAMP_NUM')\n",
    "example_pcap_s.flow2features('SAMP_NUM')\n",
    "example_pcap_w.flow2features('SAMP_NUM')\n",
    "example_pcap_ws.flow2features('SAMP_NUM')\n",
    "example_pcap_z.flow2features('SAMP_NUM')\n",
    "example_pcap_zs.flow2features('SAMP_NUM')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5eb0de8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_example_n = pd.DataFrame(example_pcap_n.features)\n",
    "df_example_s = pd.DataFrame(example_pcap_s.features)\n",
    "df_example_w = pd.DataFrame(example_pcap_w.features)\n",
    "df_example_ws = pd.DataFrame(example_pcap_ws.features)\n",
    "df_example_z = pd.DataFrame(example_pcap_z.features)\n",
    "df_example_zs = pd.DataFrame(example_pcap_zs.features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1d965ad7",
   "metadata": {},
   "outputs": [],
   "source": [
    "agnostic_sampnum_n = df_example_n.sum(axis=0)\n",
    "agnostic_sampnum_s = df_example_s.sum(axis=0)\n",
    "agnostic_sampnum_w = df_example_w.sum(axis=0)\n",
    "agnostic_sampnum_ws = df_example_ws.sum(axis=0)\n",
    "agnostic_sampnum_z = df_example_z.sum(axis=0)\n",
    "agnostic_sampnum_zs = df_example_zs.sum(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "68f65145",
   "metadata": {},
   "outputs": [],
   "source": [
    "list_sampsize = [agnostic_sampsize_n, agnostic_sampsize_s, \n",
    "                 agnostic_sampsize_w, agnostic_sampsize_ws,\n",
    "                 agnostic_sampsize_z, agnostic_sampsize_zs]\n",
    "list_sampnum = [agnostic_sampnum_n, agnostic_sampnum_s, \n",
    "                agnostic_sampnum_w, agnostic_sampnum_ws,\n",
    "                agnostic_sampnum_z, agnostic_sampnum_zs]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "aa62bbec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "39"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "agnostic_sampnum_zs.size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "93e07802",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "def get_aligned_df(list_feat):\n",
    "    aligned_list = []\n",
    "    min_length = math.inf\n",
    "    for feat in list_feat:\n",
    "        if feat.size < min_length:\n",
    "            min_length = feat.size\n",
    "    for feat in list_feat:\n",
    "        aligned_list.append(feat[:min_length-1])\n",
    "    aligned_df = pd.DataFrame(aligned_list)\n",
    "    return aligned_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "736e61e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "aligned_sampsize_df = get_aligned_df(list_sampsize)\n",
    "aligned_sampnum_df = get_aligned_df(list_sampnum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ff13c55c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>39907.000</td>\n",
       "      <td>1838.000</td>\n",
       "      <td>4967.000</td>\n",
       "      <td>285.000</td>\n",
       "      <td>3535.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>3659.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>195428.000</td>\n",
       "      <td>157633.000</td>\n",
       "      <td>158197.000</td>\n",
       "      <td>160622.000</td>\n",
       "      <td>160396.000</td>\n",
       "      <td>6357.000</td>\n",
       "      <td>158658.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>36586.000</td>\n",
       "      <td>6404.000</td>\n",
       "      <td>12911.000</td>\n",
       "      <td>16045.000</td>\n",
       "      <td>21189.000</td>\n",
       "      <td>1233.000</td>\n",
       "      <td>10671.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>32126.000</td>\n",
       "      <td>67305.000</td>\n",
       "      <td>88869.000</td>\n",
       "      <td>3676.000</td>\n",
       "      <td>73756.000</td>\n",
       "      <td>1552.000</td>\n",
       "      <td>78072.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>316627.000</td>\n",
       "      <td>282890.000</td>\n",
       "      <td>276939.000</td>\n",
       "      <td>319716.000</td>\n",
       "      <td>293249.000</td>\n",
       "      <td>215256.000</td>\n",
       "      <td>34999.000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           0          1          2          3          4          5          6\n",
       "0  39907.000   1838.000   4967.000    285.000   3535.000      0.000   3659.000\n",
       "1 195428.000 157633.000 158197.000 160622.000 160396.000   6357.000 158658.000\n",
       "2  36586.000   6404.000  12911.000  16045.000  21189.000   1233.000  10671.000\n",
       "3  32126.000  67305.000  88869.000   3676.000  73756.000   1552.000  78072.000\n",
       "4 316627.000 282890.000 276939.000 319716.000 293249.000 215256.000  34999.000"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "aligned_sampsize_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ff105a68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>107.000</td>\n",
       "      <td>20.000</td>\n",
       "      <td>9.000</td>\n",
       "      <td>4.000</td>\n",
       "      <td>5.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>7.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>221.000</td>\n",
       "      <td>120.000</td>\n",
       "      <td>114.000</td>\n",
       "      <td>113.000</td>\n",
       "      <td>110.000</td>\n",
       "      <td>21.000</td>\n",
       "      <td>111.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>107.000</td>\n",
       "      <td>26.000</td>\n",
       "      <td>19.000</td>\n",
       "      <td>22.000</td>\n",
       "      <td>30.000</td>\n",
       "      <td>4.000</td>\n",
       "      <td>21.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>87.000</td>\n",
       "      <td>55.000</td>\n",
       "      <td>77.000</td>\n",
       "      <td>6.000</td>\n",
       "      <td>52.000</td>\n",
       "      <td>8.000</td>\n",
       "      <td>55.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>536.000</td>\n",
       "      <td>402.000</td>\n",
       "      <td>400.000</td>\n",
       "      <td>529.000</td>\n",
       "      <td>448.000</td>\n",
       "      <td>407.000</td>\n",
       "      <td>96.000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        0       1       2       3       4       5       6\n",
       "0 107.000  20.000   9.000   4.000   5.000   0.000   7.000\n",
       "1 221.000 120.000 114.000 113.000 110.000  21.000 111.000\n",
       "2 107.000  26.000  19.000  22.000  30.000   4.000  21.000\n",
       "3  87.000  55.000  77.000   6.000  52.000   8.000  55.000\n",
       "4 536.000 402.000 400.000 529.000 448.000 407.000  96.000"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "aligned_sampnum_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e930cdef",
   "metadata": {},
   "source": [
    "## Part 3: Supervised model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92f8ecdb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "7c6ce355",
   "metadata": {},
   "source": [
    "## Part 4: Unupervised model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2955ca64",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.10.8 64-bit",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  },
  "vscode": {
   "interpreter": {
    "hash": "aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
